<?xml version="1.0" encoding="UTF-8"?>
<!--
 Copyright 2024

 SPDX-License-Identifier: BSD-2-Clause
-->
<system>
    <!-- We allocate 256MiB of RAM for the guest. -->
    <memory_region name="guest_ram" size="0x10000000" page_size="0x200000" phys_addr="0x70000000" />
    <!-- We want to map in the UART to get input/output. -->
    <memory_region name="uart" size="0x10000" phys_addr="0x30860000" />
    <!-- To boot Linux, we need to map in the GIC virtual CPU interface. -->
    <memory_region name="gic_vcpu" size="0x1000" phys_addr="0x31020000" />
    <memory_region name="eth" size="0x10000" phys_addr="0x30be0000" />
    <memory_region name="efuse" size="0x10000" phys_addr="0x30350000" />

    <memory_region name="gpc" size="0x10000" phys_addr="0x303a0000" />
    <memory_region name="timer" size="0x20000" phys_addr="0x306a0000" />
    <memory_region name="pinctrl" size="0x10000" phys_addr="0x30330000" />
    <memory_region name="gpio" size="0x50000" phys_addr="0x30200000" />
    <memory_region name="irqsteer" size="0x1000" phys_addr="0x32e2d000" />
    <memory_region name="syscon" size="0x10000" phys_addr="0x30360000" />
    <memory_region name="clock_controller" size="0x10000" phys_addr="0x30380000" />

    <!-- driver/device queue mechanism -->
    <memory_region name="hw_ring_buffer" size="0x10_000" />

    <!-- DMA and virtualised DMA regions -->
    <memory_region name="net_rx_buffer_data_region" size="0x200_000" page_size="0x200_000" /> <!-- Must be mapped read-only! -->
    <memory_region name="net_tx_buffer_data_region_cli0" size="0x200_000" page_size="0x200_000" />
    <memory_region name="net_rx_buffer_data_region_cli0" size="0x200_000" page_size="0x200_000" />
    <memory_region name="net_tx_buffer_data_region_cli1" size="0x200_000" page_size="0x200_000" />
    <memory_region name="net_rx_buffer_data_region_cli1" size="0x200_000" page_size="0x200_000" />

    <!-- shared memory for driver/virt queue mechanism -->
    <memory_region name="net_rx_free_drv" size="0x200_000" page_size="0x200_000"/>
    <memory_region name="net_rx_active_drv" size="0x200_000" page_size="0x200_000"/>
    <memory_region name="net_tx_free_drv" size="0x200_000" page_size="0x200_000"/>
    <memory_region name="net_tx_active_drv" size="0x200_000" page_size="0x200_000"/>

    <!-- shared memory for virt_rx/copy queue mechanism -->
    <memory_region name="net_rx_free_copy0" size="0x200_000" page_size="0x200_000"/>
    <memory_region name="net_rx_active_copy0" size="0x200_000" page_size="0x200_000"/>
    <memory_region name="net_rx_free_copy1" size="0x200_000" page_size="0x200_000"/>
    <memory_region name="net_rx_active_copy1" size="0x200_000" page_size="0x200_000"/>

    <!-- shared memory for copy/lwip queue mechanism -->
    <memory_region name="net_rx_free_cli0" size="0x200_000" page_size="0x200_000"/>
    <memory_region name="net_rx_active_cli0" size="0x200_000" page_size="0x200_000"/>
    <memory_region name="net_rx_free_cli1" size="0x200_000" page_size="0x200_000"/>
    <memory_region name="net_rx_active_cli1" size="0x200_000" page_size="0x200_000"/>

    <!-- shared memory for lwip/virt_tx queue mechanism -->
    <memory_region name="net_tx_free_cli0" size="0x200_000" page_size="0x200_000"/>
    <memory_region name="net_tx_active_cli0" size="0x200_000" page_size="0x200_000"/>
    <memory_region name="net_tx_free_cli1" size="0x200_000" page_size="0x200_000"/>
    <memory_region name="net_tx_active_cli1" size="0x200_000" page_size="0x200_000"/>

    <memory_region name="cyclecounters" size="0x1000"/>

    <!-- shared memory for serial data regions -->
    <memory_region name="serial_tx_data_driver" size="0x4_000" />
    <memory_region name="serial_tx_data_client0" size="0x2_000" />
    <memory_region name="serial_tx_data_client1" size="0x2_000" />
    <memory_region name="serial_tx_data_client2" size="0x2_000" />
    <memory_region name="serial_tx_data_ethernet_vmm" size="0x2_000" />

    <!-- shared memory for serial queue regions -->
    <memory_region name="serial_tx_queue_driver" size="0x1_000" />
    <memory_region name="serial_tx_queue_client0" size="0x1_000" />
    <memory_region name="serial_tx_queue_client1" size="0x1_000" />
    <memory_region name="serial_tx_queue_client2" size="0x1_000" />
    <memory_region name="serial_tx_queue_ethernet_vmm" size="0x2_000" />

    <!-- uio@1 and uio@2 for Ethernet driver VM, backing memory for eth TX and RX UIO IRQ -->
    <memory_region name="eth_vm_tx_uio_irq" size="0x1_000" page_size="0x1_000"/>
    <memory_region name="eth_vm_rx_uio_irq" size="0x1_000" page_size="0x1_000"/>
    <!-- uio@3 for Ethernet driver VM, data passing between VMM and guest -->
    <memory_region name="eth_vm_data_passing" size="0x1_000" page_size="0x1_000"/>

    <protection_domain name="eth" priority="254">
        <program_image path="vmm_ethernet.elf" />
        <map mr="guest_ram" vaddr="0x70000000" perms="rw" setvar_vaddr="guest_ram_vaddr" />

        <!-- sDDF related regions for virtIO console -->
        <map mr="serial_tx_queue_ethernet_vmm" vaddr="0x4_000_000" perms="rw" cached="true" setvar_vaddr="serial_tx_queue" />
        <map mr="serial_tx_data_ethernet_vmm" vaddr="0x4_002_000" perms="rw" cached="true" setvar_vaddr="serial_tx_data" />

        <setvar symbol="eth_rx_buffer_data_region_paddr" region_paddr="net_rx_buffer_data_region" />
        <setvar symbol="eth_tx_cli0_buffer_data_region_paddr" region_paddr="net_tx_buffer_data_region_cli0" />
        <setvar symbol="eth_tx_cli1_buffer_data_region_paddr" region_paddr="net_tx_buffer_data_region_cli1" />

        <map mr="eth_vm_data_passing" vaddr="0x7_000_000" perms="rw" cached="false" setvar_vaddr="vmm_info_passing" />

        <virtual_machine name="linux" >
            <vcpu id="0" />
            <map mr="guest_ram" vaddr="0x70000000" perms="rwx" />


            <map mr="eth" vaddr="0x30be0000" perms="rw" cached="false" />
            <map mr="efuse" vaddr="0x30350000" perms="rw" cached="false" />
            <!-- The guest needs to view what is actually the vCPU interface as the CPU interface. -->
            <map mr="gic_vcpu" vaddr="0x31020000" perms="rw" cached="false" />

            <!--
                Below are devices that were required to have a Linux image compiled with the default
                configuration boot.
                In a real system, you would most likely not want Linux to access any of these devices.
                This would most likely involve a combination of disabling the devices in the Device Tree
                provided to Linux as well as changing the kernel configuration.
            -->
            <map mr="syscon" vaddr="0x30360000" perms="rw" cached="false" />
            <map mr="clock_controller" vaddr="0x30380000" perms="rw" cached="false" />
            <map mr="gpc" vaddr="0x303a0000" perms="rw" cached="false" />
            <map mr="timer" vaddr="0x306a0000" perms="rw" cached="false" />
            <map mr="pinctrl" vaddr="0x30330000" perms="rw" cached="false" />
            <map mr="gpio" vaddr="0x30200000" perms="rw" cached="false" />
            <map mr="irqsteer" vaddr="0x32e2d000" perms="rw" cached="false" />

            <!-- uio@0 -->
            <map mr="net_rx_free_drv"   vaddr="0x50000000" perms="rw" cached="false" />
            <map mr="net_rx_active_drv" vaddr="0x50200000" perms="rw" cached="false" />
            <map mr="net_tx_free_drv"   vaddr="0x50400000" perms="rw" cached="false" />
            <map mr="net_tx_active_drv" vaddr="0x50600000" perms="rw" cached="false" />
            <map mr="net_rx_buffer_data_region" vaddr="0x50800000" perms="rw" cached="false" />
            <map mr="net_tx_buffer_data_region_cli0" vaddr="0x50a00000" perms="rw" cached="false" />
            <map mr="net_tx_buffer_data_region_cli1" vaddr="0x50c00000" perms="rw" cached="false" />

            <!-- uio@1 and uio@2 -->
            <map mr="eth_vm_tx_uio_irq" vaddr="0x60000000" perms="rw" cached="false" />
            <map mr="eth_vm_rx_uio_irq" vaddr="0x60002000" perms="rw" cached="false" />

            <!-- uio@3 -->
            <map mr="eth_vm_data_passing" vaddr="0x60004000" perms="rw" cached="false" />
        </virtual_machine>
        <!-- eth interrupt -->
        <irq irq="152" id="5" />
    </protection_domain>

    <protection_domain name="uart" priority="100">
        <program_image path="uart_driver.elf" />

        <map mr="uart" vaddr="0x5_000_000" perms="rw" cached="false" setvar_vaddr="uart_base" />

        <map mr="serial_tx_queue_driver" vaddr="0x4_001_000" perms="rw" cached="true" setvar_vaddr="tx_queue" />
        <map mr="serial_tx_data_driver" vaddr="0x4_002_000" perms="rw" cached="true" setvar_vaddr="tx_data" />

        <irq irq="58" id="0" trigger="edge" /> <!-- UART interrupt -->
    </protection_domain>

    <protection_domain name="serial_virt_tx" priority="99">
        <program_image path="serial_virt_tx.elf" />
        <map mr="serial_tx_queue_driver" vaddr="0x4_000_000" perms="rw" cached="true" setvar_vaddr="tx_queue_drv" />
        <map mr="serial_tx_queue_client0" vaddr="0x4_001_000" perms="rw" cached="true" setvar_vaddr="tx_queue_cli0" />
        <map mr="serial_tx_queue_client1" vaddr="0x4_002_000" perms="rw" cached="true"/>
        <map mr="serial_tx_queue_client2" vaddr="0x4_003_000" perms="rw" cached="true"/>
        <map mr="serial_tx_queue_ethernet_vmm" vaddr="0x4_004_000" perms="rw" cached="true"/>

        <map mr="serial_tx_data_driver" vaddr="0x5_004_000" perms="rw" cached="true" setvar_vaddr="tx_data_drv" />
        <map mr="serial_tx_data_client0" vaddr="0x5_008_000" perms="r" cached="true" setvar_vaddr="tx_data_cli0" />
        <map mr="serial_tx_data_client1" vaddr="0x5_00a_000" perms="r" cached="true"/>
        <map mr="serial_tx_data_client2" vaddr="0x5_00c_000" perms="r" cached="true"/>
        <map mr="serial_tx_data_ethernet_vmm" vaddr="0x5_00e_000" perms="r" cached="true"/>
    </protection_domain>

    <channel>
        <end pd="uart" id="1"/>
        <end pd="serial_virt_tx" id="0"/>
    </channel>

    <channel>
        <end pd="serial_virt_tx" id="4"/>
        <end pd="eth" id="3"/>
    </channel>

</system>
